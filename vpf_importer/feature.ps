%!PS-Adobe-3.0
%%Title: feature.hxx
%%For: Heiner Lamprecht
%%Creator: a2ps version 4.13
%%CreationDate: Wed Jun 12 21:50:34 2002
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: a4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// feature.hxx - declaration of VpfFeature class.) c n
(// This file is released into the Public Domain, and comes with NO WARRANTY!) N
() p n
(#ifndef) K
( __VPF_FEATURE_HXX) p n
(#define) K
( __VPF_FEATURE_HXX 1) p n
() N
(#include) K
( ") p
(vpfbase.hxx) str
(") p n
(#include) K
( ") p
(component.hxx) str
(") p n
() N
(class) K
( VpfTable;) p n
(class) K
( VpfValue;) p n
(class) K
( VpfCoverage;) p n
(class) K
( VpfLine;) p n
(class) K
( VpfPolygon;) p n
(class) K
( VpfLabel;) p n
(class) K
( VpfPropertyDecl;) p n
(class) K
( VpfTile;) p n
() N
() N
(/**) c n
( * A feature in a coverage in a library in a VPF database.) N
( *) N
( * <p>This is the optional fourth level of the VPF hierarchy: a) N
( * library \(such as transportation\) may or may not be divided into) N
( * separate features \(such as roads, railroads, etc.\).  This class) N
( * provides information about a feature, and also provides a) N
( * convenient way to access all of the shape information for a) N
( * specific feature in a single place.</p>) N
( *) N
( * @author David Megginson, david@megginson.com) N
( * @version $Revision$) N
( */) N
(class) K
( VpfFeature : ) p
(public) K
( VpfComponent) p n
({) N
(public) K
(:) p n
() N
() N
(  ) S
(/**) c n
(   * The possible topology types.) N
(   */) N
(  ) p
(enum) k
( TopologyType {) p n
(    UNKNOWN,) N
(    POINT,) N
(    LINE,) N
(    POLYGON,) N
(    LABEL) N
(  };) N
() N
() N
(  ) S
(/**) c n
(   * Copy constructor.) N
(   */) N
(  VpfFeature \() p
(const) K
( VpfFeature &feature\);) p n
() N
() N
(  ) S
(/**) c n
(   * Destructor.) N
(   */) N
(  ) p
(virtual) K
( ~VpfFeature \(\);) p n
() N
() N
(  ) S
(/**) c n
(feature.hxx) (Seite 1/5) (Jun 12, 02 21:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   * Get the name of this feature.) c n
(   *) N
(   * @return The feature's short name as a character string.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( ) p
(char) k
( * getName \(\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get the full description of this feature.) N
(   *) N
(   * @return The feature's description as a character string.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( ) p
(char) k
( * getDescription \(\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Test whether this feature's topology is tiled.) N
(   *) N
(   * @return true if the feature's topology is tiled, false otherwise.) N
(   */) N
(  ) p
(virtual) K
( ) p
(bool) k
( isTiled \(\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Count the feature properties.) N
(   *) N
(   * @return The number of properties for the feature.) N
(   */) N
(  ) p
(virtual) K
( ) p
(int) k
( getPropertyDeclCount \(\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get a property declaration.) N
(   *) N
(   * @param index The index of the property declaration.) N
(   * @return The property declaration.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfPropertyDecl getPropertyDecl \() p
(int) k
( index\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Test whether a property is present.) N
(   *) N
(   * @param name The property name to test.) N
(   * @return true if the property is present, false otherwise.) N
(   */) N
(  ) p
(virtual) K
( ) p
(bool) k
( hasProperty \() p
(const) K
( std::string &name\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get a property declaration by name.) N
(   *) N
(   * @param name The name of the feature property.) N
(   * @return The declaration for the property.) N
(   * @exception VpfException If the specified feature property does not) N
(   * exist.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfPropertyDecl) p n
(  getPropertyDecl \() S
(const) K
( std::string &name\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(feature.hxx) (Seite 2/5) (Jun 12, 02 21:15) title
border
grestore
(Gedruckt von Heiner Lamprecht) rhead
(feature.hxx) (1/3) (Mittwoch Juni 12, 2002) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   * Get a property value for a specific piece of topology.) c n
(   *) N
(   * @param name The property name to look up.) N
(   * @param index The index of the topology.) N
(   * @return The property value for the specified topology.) N
(   * @exception VpfException If the specified feature property does) N
(   * not exist or if the index is out of range.) N
(   * @see #getTopologyCount) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfValue &getPropertyValue \() p
(const) K
( std::string &name,) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (    ) S
(int) k
( index\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get the type of topology covered by the feature.) N
(   *) N
(   * @return ) N
(   */) N
(  ) p
(virtual) K
( TopologyType getTopologyType \(\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Count the topology items in the feature.) N
(   */) N
(  ) p
(virtual) K
( ) p
(int) k
( getTopologyCount \(\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get a point from this feature.) N
(   *) N
(   * @param index The index of the point to retrieve.) N
(   * @return The point requested.) N
(   * @exception VpfException If the index is out of range.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfPoint getPoint \() p
(int) k
( index\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get a line from this feature.) N
(   *) N
(   * @param index The index of the line to retrieve.) N
(   * @return The line requested.) N
(   * @exception VpfException If the index is out of range.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfLine getLine \() p
(int) k
( index\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get a polygon from this feature.) N
(   *) N
(   * @param index The index of the polygon to retrieve.) N
(   * @return The polygon requested.) N
(   * @exception VpfException If the index is out of range.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfPolygon getPolygon \() p
(int) k
( index\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Text a label from this feature.) N
(   *) N
(   * @param index The index of the label to retrieve.) N
(   * @return The label requested.) N
(feature.hxx) (Seite 3/5) (Jun 12, 02 21:15) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   * @exception VpfException If the index is out of range.) c n
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfLabel getLabel \() p
(int) k
( index\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get the tile where a specific topology occurs.) N
(   *) N
(   * @param index The index of the topology.) N
(   * @return The tile where the topology occurs.) N
(   * @exception VpfException If the index is out of range.) N
(   * @see #getTopologyCount) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfTile getTile \() p
(int) k
( index\) ) p
(const) K
(;) p n
() N
() N
(protected) K
(:) p n
() N
(  ) S
(friend) K
( ) p
(class) K
( VpfCoverage;) p n
(  ) S
(friend) K
( ) p
(class) K
( VpfPropertyDecl;) p n
() N
() N
(  ) S
(/**) c n
(   * Protected constructor.) N
(   *) N
(   * <p>This is the only way to build a new feature from scratch.) N
(   * Library users should obtain a feature object from the VpfCoverage) N
(   * class.</p>) N
(   *) N
(   * @param path The path to the coverage directory.) N
(   * @param name The name of the feature.) N
(   * @param coverage The parent coverage.) N
(   */) N
(  VpfFeature \() p
(const) K
( std::string &path, ) p
(const) K
( std::string &name,) p n
() S 8 T (      ) S
(const) K
( VpfCoverage &coverage\);) p n
() N
() N
(  ) S
(/**) c n
(   * Get the feature table for the feature.) N
(   *) N
(   * <p>The feature table \(*.pft, *.lft, *.aft, or *.tft, depending) N
(   * on the coverage type\) contains information about the feature,) N
(   * including a list of topologies.  This is a lazy implementation:) N
(   * the feature table will not be loaded unless it is actually) N
(   * needed.</p>) N
(   *) N
(   * @return The feature table for this feature.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfTable &getXFT \(\) ) p
(const) K
(;) p n
() N
() N
(  ) S
(/**) c n
(   * Get the feature class attribute table.) N
(   *) N
(   * <p>The FCA contains the description of each feature.  This is) N
(   * a lazy implementation: the FCA will not be loaded unless it is) N
(   * actually needed.</p>) N
(   *) N
(   * @return The FCA table.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( VpfTable &getFCA \(\) ) p
(const) K
(;) p n
() N
(feature.hxx) (Seite 4/5) (Jun 12, 02 21:15) title
border
grestore
(Gedruckt von Heiner Lamprecht) rhead
(feature.hxx) (2/3) (Mittwoch Juni 12, 2002) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  ) S
(/**) c n
(   * Get the name of the feature table.) N
(   *) N
(   * @return The name of the feature table, with the appropriate) N
(   * extension based on the feature type.) N
(   */) N
(  ) p
(virtual) K
( ) p
(const) K
( std::string getFeatureTableName \(\) ) p
(const) K
(;) p n
() N
(private) K
(:) p n
() N
(  ) S
(bool) k
( isProperty \() p
(const) K
( std::string &name\) ) p
(const) K
(;) p n
() N
(  std::string _name;) N
(  TopologyType _topology_type;) N
(  std::string _tileref_path;) N
(  ) S
(mutable) k
( ) p
(const) K
( VpfTable * _xft;) p n
(  ) S
(mutable) k
( ) p
(const) K
( VpfTable * _fca;) p n
(};) N
() N
(#endif) K n
() p n
(// end of feature.hxx) c n
(feature.hxx) (Seite 5/5) (Jun 12, 02 21:15) title
border
grestore
(Gedruckt von Heiner Lamprecht) rhead
(feature.hxx) (3/3) (Mittwoch Juni 12, 2002) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
